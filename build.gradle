buildscript {
    ext {
        springBootVersion = '1.2.3.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url 'http://dl.bintray.com/vermeulen-mp/gradle-plugins' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:0.5.0.RELEASE")
		classpath("com.wiredforcode:gradle-heroku-plugin:1.0.0")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'heroku'
apply plugin: "sonar-runner"

heroku {
    //get this from heroku
    apiKey = '6f4bce3e-6b89-4bc6-808e-3bf106dfc70b'

    //set this on first run if you don't want a generated name
    appName = 'nemocnica-global'

    //set this if you are not happy with the default gradlew buildpack
    //buildpack = 'http://somebuildpack
}

jar {
    baseName = 'nemocnica-global'
    version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}


dependencies {

    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-freemarker")

    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    runtime("org.postgresql:postgresql:9.2-1004-jdbc41")

    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.security.oauth:spring-security-oauth2:2.0.7.RELEASE")

    compile("org.springframework.boot:spring-boot-starter-logging")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("com.jayway.jsonpath:json-path")
    testCompile("com.jayway.jsonpath:json-path-assert:0.9.1")
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task stage(type: Copy, dependsOn: [clean, build]) {
    from jar.archivePath
    into project.rootDir 
    rename {
        'app.jar'
    }
}
stage.mustRunAfter(clean)

clean << {
    project.file('app.jar').delete()
}

import org.apache.tools.ant.taskdefs.condition.Os

task stopServer(type: Exec) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        //todo check if its working
        //commandLine 'stopServer.bat'
    }
    if (Os.isFamily(Os.FAMILY_UNIX)) {
        commandLine './stopServer.sh'
    }
}

bootRun.dependsOn stopServer

sonarRunner {
    sonarProperties {
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.jdbc.url", "jdbc:postgresql://localhost:5432/sonar"
        property "sonar.jdbc.driverClassName", " org.postgresql.Driver"
        property "sonar.jdbc.username", "postgres"
        property "sonar.jdbc.password", "postgres"
    }
}
